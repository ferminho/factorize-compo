Strict

Import brl.json

Import logger
Import world.levelmap

Class LevelMapFactory
	Function LoadFromFile:LevelMap(jsonFilePath:String)
		Local content:String = LoadString(jsonFilePath)
		Return LoadFromString(content)
	End Function	

	Function LoadFromString:LevelMap(json:String)
		Local parser:JsonParser = New JsonParser(json)
		Local root:JsonValue = parser.ParseValue()
		Return ReadRoot(root)
	End Function

Private

	Const ATTRWIDTH:String = "width"
	Const ATTRHEIGHT:String = "height"
	Const ATTRLAYERS:String = "layers"
	Const ATTRNAME:String = "name"
	Const ATTRDATA:String = "data"

	Const LAYERGROUND:String = "ground"
	Const LAYERTOP:String = "top"
	Const LAYERSPAWNER:String = "spawners"
	Const LAYERCONSUMER:String = "consumers"
	
	Const FLAGFLIPPEDHORIZONTALLY:Int = $80000000
	Const FLAGFLIPPEDVERTICALLY:Int = $40000000
	Const FLAGFLIPPEDDIAGONALLY:Int = $20000000
	

	Function ReadRoot:LevelMap(root:JsonValue)
		Local rootJson:JsonObject = JsonObject(root)
		Local width:Int = rootJson.GetInt(ATTRWIDTH)
		Local height:Int = rootJson.GetInt(ATTRHEIGHT)
		Local map:LevelMap = New LevelMap(width, height)
		Local layers:JsonValue = rootJson.Get(ATTRLAYERS)
		ReadLayers(map, layers)
		
		Return map
	End Function

	Function ReadLayers:Void(map:LevelMap, layers:JsonValue)
		Local layersArray:JsonArray = JsonArray(layers)
		
		For Local i:Int = 0 To layersArray.Length - 1
			ReadLayer(map, layersArray.Get(i))
		End For
	End Function
	
	Function ReadLayer:Void(map:LevelMap, layer:JsonValue)
		Local layerJson:JsonObject = JsonObject(layer)
		Local name:String = layerJson.GetString(ATTRNAME).ToLower()
		
		Select (name)
			Case LAYERGROUND
				ReadData(layerJson.Get(ATTRDATA), map.groundTiles)
			Case LAYERTOP
				ReadData(layerJson.Get(ATTRDATA), map.topTiles)
			Case LAYERSPAWNER
			Case LAYERCONSUMER
			Default
				Logger.Warn("LevelMapFactory: Unrecognized layer " + name)
		End Select
	End Function
	
	Function ReadData:Void(data:JsonValue, target:Int[])
		Local dataArray:JsonArray = JsonArray(data)
		Local val:Int
		Local tile:Int
		Local flipX:Bool, flipY:Bool, flipAD:Bool
		
		For Local i:Int = 0 To dataArray.Length - 1
			val = dataArray.GetInt(i)
			tile = val & ~(FLAGFLIPPEDDIAGONALLY | FLAGFLIPPEDHORIZONTALLY | FLAGFLIPPEDDIAGONALLY)
			tile = Max(0, tile - 1) ' Tiled reserves 0 for no tile, but we also have a 0 blank tile so we need to shift one value to 0
			flipX = val & FLAGFLIPPEDHORIZONTALLY > 0
			flipY = val & FLAGFLIPPEDVERTICALLY > 0
			flipAD = val & FLAGFLIPPEDDIAGONALLY > 0
			If (flipAD)
				If (flipX And Not flipY)
					tile = tile | LevelMap.DIRECTIONDOWN
				Else If (Not flipX And flipY)
					tile = tile | LevelMap.DIRECTIONUP
				End If
			Else If (flipX And flipY)
				tile = tile | LevelMap.DIRECTIONLEFT
			Else If (flipX)
				tile = tile | LevelMap.MIRRORX
			Else If (flipY)
				tile = tile | LevelMap.MIRRORY
			End If
			target[i] = tile
		End For
	End Function
	
	Function PrintType:Void(value:JsonValue)
		Select (value.Type)
			Case JsonValue.OBJECTTYPE
				Print("OBJECT")
			Case JsonValue.ARRAYTYPE
				Print("ARRAY")
			Case JsonValue.NULLTYPE
				Print("NULL")
			Case JsonValue.BOOLTYPE
				Print("BOOL")
			Case JsonValue.NUMBERTYPE
				Print("NUMBER")
			Case JsonValue.STRINGTYPE
				Print("STRING")
		End Select
	End Function
End Class