Strict

Import brl.json

Import logger
Import world.items.tile
Import world.levelmap
Import world.tileset

Class LevelMapFactory
	Function LoadFromFile:LevelMap(jsonFilePath:String)
		Local content:String = LoadString(jsonFilePath)
		Return LoadFromString(content)
	End Function	

	Function LoadFromString:LevelMap(json:String)
		Local parser:JsonParser = New JsonParser(json)
		Local root:JsonValue = parser.ParseValue()
		Return ReadRoot(root)
	End Function

Private

	Const ATTRWIDTH:String = "width"
	Const ATTRHEIGHT:String = "height"
	Const ATTRLAYERS:String = "layers"
	Const ATTRNAME:String = "name"
	Const ATTRDATA:String = "data"

	Const LAYERTILES:String = "tiles"
	Const LAYERSPAWNER:String = "spawners"
	Const LAYERCONSUMER:String = "consumers"
	
	Const FLAGFLIPPEDHORIZONTALLY:Int = $80000000
	Const FLAGFLIPPEDVERTICALLY:Int = $40000000
	Const FLAGFLIPPEDDIAGONALLY:Int = $20000000

	Function ReadRoot:LevelMap(root:JsonValue)
		Local rootJson:JsonObject = JsonObject(root)
		Local width:Int = rootJson.GetInt(ATTRWIDTH)
		Local height:Int = rootJson.GetInt(ATTRHEIGHT)
		Local map:LevelMap = New LevelMap(width, height)
		Local layers:JsonValue = rootJson.Get(ATTRLAYERS)
		ReadLayers(map, layers)
		
		Return map
	End Function

	Function ReadLayers:Void(map:LevelMap, layers:JsonValue)
		Local layersArray:JsonArray = JsonArray(layers)
		Local layerMap:StringMap<JsonObject> = New StringMap<JsonObject>()
		Local layerName:String
		Local layerJson:JsonObject
		
		For Local i:Int = 0 To layersArray.Length - 1
			layerJson = JsonObject(layersArray.Get(i))
			layerName = layerJson.GetString(ATTRNAME).ToLower()
			layerMap.Add(layerName, layerJson)
		End For
		
		For Local expectedLayer:String = EachIn [LAYERTILES, LAYERSPAWNER, LAYERCONSUMER]
			If (Not layerMap.Contains(expectedLayer))
				Logger.Error("LevelMapFactory: map does not contain layer " + expectedLayer)
				EndApp()
			End If
		Next

		ReadLayerTileData(map, layerMap.Get(LAYERTILES))
		'ReadSpawners LAYERSPAWNER
		'ReadConsumers LAYERCONSUMER
	End Function

	Function ReadLayerTileData:Void(map:LevelMap, layerJson:JsonObject)
		Local dataArray:JsonArray = JsonArray(layerJson.Get(ATTRDATA))
		Local val:Int
		Local tileType:Int
		Local tile:Tile
		Local target:Tile[]
		Local flipX:Bool, flipY:Bool, flipAD:Bool
		Local angle:Float = 0.0
		
		For Local i:Int = 0 To dataArray.Length - 1
			val = dataArray.GetInt(i)
			tileType = val & ~(FLAGFLIPPEDVERTICALLY | FLAGFLIPPEDHORIZONTALLY | FLAGFLIPPEDDIAGONALLY)
			tileType = Max(0, tileType - 1) ' Tiled reserves 0 for no tile, but we also have a 0 blank tile so we need to shift one value to 0
			
			If (tileType > 0) ' no need to process ABYSS, let them be null
				flipX = val & FLAGFLIPPEDHORIZONTALLY <> 0
				flipY = val & FLAGFLIPPEDVERTICALLY <> 0
				flipAD = val & FLAGFLIPPEDDIAGONALLY <> 0

				If (TileSet.IsTopLayer[tileType])
					target = map.topTiles
				Else
					target = map.groundTiles
				End If
				
				If (flipAD)
					angle = 90.0
					flipY = Not flipY
				Else
					angle = 0.0
				End If
				target[i] = New Tile(tileType, angle, flipX, flipY)
			End If
		End For
	End Function
	
	Function PrintType:Void(value:JsonValue)
		Select (value.Type)
			Case JsonValue.OBJECTTYPE
				Print("OBJECT")
			Case JsonValue.ARRAYTYPE
				Print("ARRAY")
			Case JsonValue.NULLTYPE
				Print("NULL")
			Case JsonValue.BOOLTYPE
				Print("BOOL")
			Case JsonValue.NUMBERTYPE
				Print("NUMBER")
			Case JsonValue.STRINGTYPE
				Print("STRING")
		End Select
	End Function
	
	Function Bool2String:String(b:Bool)
		If (b) Then Return "true"
		Return "false"
	End Function
End Class