Strict

Import mojo2

Import consts
Import world.camera
Import world.grid
Import world.tileset
Import world.items.chunk
Import world.items.chunkcontroller
Import world.items.tile

Class LevelMap Implements Grid
	Field groundTiles:Tile[]
	Field topTiles:Tile[]

	Field chunkController:ChunkController = New ChunkController()
	

	Method New(width:Int, height:Int)
		Self.width = width
		Self.height = height
		groundTiles = New Tile[width * height]
		topTiles = New Tile[width * height]
		
		' TEST
		Local chunk:Chunk = New Chunk(3, 3)
		chunk.x = TILESIZE * 6
		chunk.y = TILESIZE * 5
		chunk.AddBlock(TileSet.BLOCKCONCRETE, 0, 1)
		chunk.AddBlock(TileSet.BLOCKCONCRETE, 1, 0)
		chunk.AddBlock(TileSet.BLOCKCONCRETE, 1, 1)
		chunk.AddBlock(TileSet.BLOCKCONCRETE, 1, 2)
		chunk.AddBlock(TileSet.BLOCKCONCRETE, 2, 1)
		chunkController.AddChunk(chunk)
		
	End Method

	Method Width:Int() Property
		Return width
	End Method
	
	Method Height:Int() Property
		Return height
	End Method

	Method Update:Void()
		For Local tilemap:Tile[] = EachIn [groundTiles, topTiles]
			For Local i:Int = 0 To tilemap.Length - 1
				If (tilemap[i] <> Null) Then tilemap[i].Update()
			End For
		End For
	End Method
	
	Method Draw:Void(canvas:Canvas, camera:Camera)
		DrawGroundTiles(canvas, camera)
		chunkController.Draw(canvas, camera)
		DrawTopTiles(canvas, camera)
	End Method

	Method DrawGroundTiles:Void(canvas:Canvas, camera:Camera)
		DrawTiles(canvas, groundTiles, camera)
	End Method
	
	Method DrawTopTiles:Void(canvas:Canvas, camera:Camera)
		DrawTiles(canvas, topTiles, camera)
	End Method

	Method GetGroundTileAt:Tile(x:Float, y:Float)
		Local i:Int = Floor((y - 0.5) / TILESIZE)
		Local j:Int = Floor((x + 0.5) / TILESIZE)
		If (i < 0 Or i >= height) Then Return Null
		If (j < 0 Or j >= width) Then Return Null
		Return groundTiles[i * width + j]
	End Method

	Method GetTopTileAt:Tile(x:Float, y:Float)
		Local i:Int = Floor((y - 0.5) / TILESIZE)
		Local j:Int = Floor((x + 0.5) / TILESIZE)
		If (i < 0 Or i >= height) Then Return Null
		If (j < 0 Or j >= width) Then Return Null
		Return topTiles[i * width + j]
	End Method

Private

	Field width:Int
	Field height:Int

	Method DrawTiles:Void(canvas:Canvas, tilemap:Tile[], camera:Camera)
		Local camX0Mod:Int = camera.x0 Mod TILESIZE
		If (camX0Mod < 0.0) Then camX0Mod += TILESIZE
		Local camY0Mod:Int = camera.y0 Mod TILESIZE
		If (camY0Mod < 0.0) Then camY0Mod += TILESIZE
		Local x0:Int = -camX0Mod + HALFTILESIZE
		Local y:Int = -camY0Mod + HALFTILESIZE

		Local tileI0:Int = Floor(camera.y0 / TILESIZE)
		Local tileI1:Int = tileI0 + (CANVASHEIGHT / TILESIZE)
		Local tileJ0:Int = Floor(camera.x0 / TILESIZE)
		Local tileJ1:Int = tileJ0 + (CANVASWIDTH / TILESIZE)
		Local tile:Tile = Null
		
		For Local i:Int = tileI0 To tileI1
			Local x:Int = x0
			For Local j:Int = tileJ0 To tileJ1
				If (i >= 0 And i < height And j >= 0 And j < width)
					tile = tilemap[i * width + j]
					If (tile <> Null)
						tile.Draw(canvas, x, y)
					End If
				Else
					canvas.DrawImage(TileSet.GfxTiles[TileSet.ABYSS], x, y)
				End If
				x += TILESIZE
			End For
			y += TILESIZE
		End For
	End Method
	
	Method DrawTilesAt:Void(canvas:Canvas, tilemaps:Int[][], position:Int, x:Int, y:Int)
		Local imgN:Int
		Local animFrames:Int
		Local img:Image
		Local direction:Int
		Local mirror:Int
		Local angle:Float = 0.0
		Local scaleX:Float = 1.0
		Local scaleY:Float = 1.0
		
		For Local tilemap:Int[] = EachIn tilemaps
			imgN = tilemap[position]
			direction = imgN & MASKDIRECTION
			mirror = imgN & MASKMIRROR
			imgN &= MASKTILE
			If (imgN > 0)
				animFrames = TileSet.AnimFrames[imgN]
				If (animFrames > 1) Then imgN += animDelta Mod animFrames
				img = TileSet.GfxTiles[imgN]
				
				If (direction = DIRECTIONDOWN)
					angle = -90.0
				Else If (direction = DIRECTIONLEFT)
					scaleX = -1.0
					scaleY = -1.0
				Else If (direction = DIRECTIONUP)
					scaleX = -1.0
					angle = -90.0
				Else If (direction = MIRRORX)
					scaleX = -1.0
				Else If (direction = MIRRORY)
					scaleY = -1.0
				EndIf

				canvas.DrawImage(img, x, y, angle, scaleX, scaleY)
			End If
		End For
	End Method
	
End Class