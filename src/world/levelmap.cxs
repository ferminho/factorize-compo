Strict

Public

Import mojo2

Import consts
Import world.camera
Import world.tileset

Class LevelMap
Public

	Const MASKDIRECTION:Int = $700	' 8 most significant bits are for tile index
	Const DIRECTIONRIGHT:Int = $000
	Const DIRECTIONDOWN:Int = $100
	Const DIRECTIONLEFT:Int = $200
	Const DIRECTIONUP:Int = $300
	Const MASKMIRRORX:Int = $400
	Const MASKMIRRORY:Int = $500
	Const MASKMIRRORXY:Int = $600

	Field width:Int
	Field height:Int

	Field groundTiles:Int[]
	Field fixedBlocks:Int[]
	Field playerBlocks:Int[]

	Method Draw:Void(canvas:Canvas, camera:Camera)
		Local x0:Int = -(camera.x0 Mod TileSize)
		Local y:Int = -(camera.y0 Mod TileSize)

		Local tileI0:Int = camera.y0 / TileSize
		Local tileI1:Int = tileI0 + (CanvasHeight / TileSize)
		Local tileJ0:Int = camera.x0 / TileSize
		Local tileJ1:Int = tileJ0 + (CanvasWidth / TileSize)
		
		For Local i:Int = tileI0 To tileI1
			If (i >= 0 And i < height)
				Local x:Int = x0
				For Local j:Int = tileJ0 To tileJ1
					If (j >= 0 And j < width)
						Local imgN:Int = tiles[i * width + j]
						Local img:Image = Tileset.GfxTiles[imgN]
						canvas.DrawImage(img, x, y)
					End If
					x += TileSize
				End For
			End If
			y += TileSize
		End For
			
	End Method
	
	Method GetGroundTileAt:Int(x:Float, y:Float)
		Local i:Int = Floor((y - 0.5) / TileSize)
		Local j:Int = Floor((x + 0.5) / TileSize)
		If (i < 0 Or i >= height) Then Return Tileset.TVOID
		If (j < 0 Or j >= width) Then Return Tileset.TVOID
		Return groundTiles[i * width + j]
	End Method
	
End Class